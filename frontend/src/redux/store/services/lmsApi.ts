import {
  AccountRequest,
  AccountsPage,
  AdminClaimRequest,
  AdminLotRequest,
  AssessmentInfo,
  AssessmentRequest,
  AssessmentsPage,
  AttendanceInfo,
  AttendanceRequest,
  AuthRequest,
  AuthResponse,
  BonusRequest,
  ClaimInfo,
  ClaimsPage,
  DeadlineInfo,
  EmailRequest,
  FinalGradeFormula,
  FinalGradeInfo,
  GetAccountsApiArg,
  GetAssessmentsApiArg,
  GetClaimsApiArg,
  GetClaimsLearnerApiArg,
  GetLessonsApiArg,
  GetLotsApiArg,
  GetLotsLearnerApiArg,
  GetSolutionsApiArg,
  GetSolutionsLearnerApiArg,
  GetSolutionsTrackerApiArg,
  GetTasksApiArg,
  GetTeamsApiArg,
  GetTransactionsApiArg,
  GetTransactionsLearnerApiArg,
  Id,
  LearnerAssessmentTableItem,
  LearnerClaimRequest,
  LearnerClaimsPage,
  LearnerLessonInfo,
  LearnerLessonTableItem,
  LearnerLotsPage,
  LearnerSolutionInfo,
  LearnerSolutionsTable,
  LearnerTeamProfile,
  LearnerTransactionsPage,
  LessonInfo,
  LessonRequest,
  LessonSelectionList,
  LessonsPage,
  LotInfo,
  LotsPage,
  NewClaimsAmount,
  Role,
  SolutionsPage,
  TaskInfo,
  TaskRequest,
  TaskSelectionList,
  TaskType,
  TasksPage,
  TeamProfile,
  TeamRequest,
  TeamSelectionList,
  TeamsPage,
  TrackerSolutionInfo,
  TrackerSolutionsTable,
  TrackerTasksSolutionsTable,
  TransactionInfo,
  TransactionRequest,
  TransactionsPage,
  UploadFileApiArg,
  UserBalance,
  UserProfile,
  UserSelectionList,
} from '@/types/common';
import { commonApi as api } from './commonApi';

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    createAssessmentByTracker: build.mutation<undefined, AssessmentRequest>({
      query: (assessmentRequest) => ({
        url: `/tracker/assessments`,
        method: 'POST',
        body: assessmentRequest,
      }),
    }),

    updateAssessmentByTracker: build.mutation<undefined, AssessmentRequest>({
      query: (assessmentRequest) => ({
        url: `/tracker/assessments`,
        method: 'PUT',
        body: assessmentRequest,
      }),
    }),

    getSolutionsTracker: build.query<
      TrackerTasksSolutionsTable,
      GetSolutionsTrackerApiArg
    >({
      query: (queryArg) => ({
        url: `/tracker/solutions/tasks`,
        params: {
          sortProperty: queryArg.sortProperty,
          sortOrder: queryArg.sortOrder,
        },
      }),
    }),

    getSolutionsByTaskIdTracker: build.query<TrackerSolutionsTable, Id>({
      query: (taskId) => ({
        url: `/tracker/solutions`,
        params: { taskId: taskId },
      }),
    }),

    getSolutionInfoByIdTracker: build.query<TrackerSolutionInfo, Id>({
      query: (id) => ({ url: `/tracker/solutions/${id}` }),
    }),
  }),
  overrideExisting: false,
});

export { injectedRtkApi as lmsApi };

export const {
  useAuthMutation,
  useGetAccountsQuery,
  useCreateAccountMutation,
  useUpdateAccountMutation,
  useGetAccountByIdQuery,
  useGetUserBalanceByIdQuery,
  useDeleteAccountByIdMutation,
  useGetAccountsForSelectQuery,
  useGetTeamsQuery,
  useCreateTeamMutation,
  useUpdateTeamMutation,
  useGetTeamByIdQuery,
  useDeleteTeamByIdMutation,
  useGetTeamByIdLearnerQuery,
  useGetTeamsForSelectQuery,
  useGetAssessmentsQuery,
  useCreateAssessmentMutation,
  useUpdateAssessmentMutation,
  useGetAssessmentByIdQuery,
  useDeleteAssessmentByIdMutation,
  useGetFinalGradesByLearnerIdQuery,
  useGetFinalGradeFormulaQuery,
  useUpdateFinalGradeFormulaMutation,
  useIncreaseFinalGradeMutation,
  useGetFinalAssessmentsLearnerQuery,
  useCreateAssessmentByTrackerMutation,
  useUpdateAssessmentByTrackerMutation,
  useGetTasksQuery,
  useCreateTaskMutation,
  useUpdateTaskMutation,
  useGetTaskByIdQuery,
  useDeleteTaskByIdMutation,
  useGetTasksForSelectQuery,
  useGetDeadlineByTaskQuery,
  useGetLessonsQuery,
  useCreateLessonMutation,
  useUpdateLessonMutation,
  useGetLessonByIdQuery,
  useDeleteLessonByIdMutation,
  useGetLessonsForSelectQuery,
  useGetLessonsLearnerQuery,
  useGetLessonByIdLearnerQuery,
  useGetLotsQuery,
  useCreateLotMutation,
  useUpdateLotMutation,
  useGetLotByIdQuery,
  useDeleteLotByIdMutation,
  useGetLotsLearnerQuery,
  useGetTransactionsQuery,
  useCreateManualTransactionMutation,
  useGetTransactionByIdQuery,
  useGetTransactionsLearnerQuery,
  useGetClaimsQuery,
  useUpdateClaimMutation,
  useGetClaimByIdQuery,
  useGetNewClaimsAmountQuery,
  useGetClaimsLearnerQuery,
  useCreateClaimMutation,
  useGetAttendanceQuery,
  useUpdateAttendanceMutation,
  useUploadFileMutation,
  useGetSolutionsQuery,
  useGetSolutionsLearnerQuery,
  useGetSolutionByIdLearnerQuery,
  useGetSolutionsTrackerQuery,
  useGetSolutionsByTaskIdTrackerQuery,
  useGetSolutionInfoByIdTrackerQuery,
  useCreateEmailMutation,
} = injectedRtkApi;
