openapi: "3.0.2"

info:
  title: "LMS Entrepreneurship School API"
  description: "API for interaction with LMS backend. \n\n Путь без роли доступны всем. \n\n /admin - доступ только Admin. \n\n /learner - доступ Learner и Tracker. \n\n /tracker - доступ только Tracker. \n\n Во всех requests и responses неиспользуемые поля должны содержать null."
  version: "1.0.1"

servers:
- url: https://localhost:3000/api/v1

paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Authenticate user
      description: Authenticate user
      operationId: Auth
      requestBody:
        description: Credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
              
  
  /admin/accounts:
    get:
      tags:
        - Accounts
      summary: Get list of accounts by filter and sort
      description: Get list of accounts by filter and sort
      operationId: getAccounts
      parameters:
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/email'
        - $ref: '#/components/parameters/teamNumber'
        - $ref: '#/components/parameters/role'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    post:
      tags:
        - Accounts
      summary: Create account
      description: Create account
      operationId: createAccount
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Accounts
      summary: Update account
      description: Update account
      operationId: updateAccount
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Get account profile by id
      description: Get account profile by id
      operationId: getAccountById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/accounts/balance-name:
    get:
      tags:
        - Accounts
      summary: Get user balance and name
      description: Get user balance and name
      operationId: getUserBalanceById
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: integer
                    example: 100
                  name:
                    $ref: '#/components/schemas/shortName'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    
  /admin/accounts/{id}:
    delete:
      tags:
        - Accounts
      summary: Delete account by id
      description: Delete account by id
      operationId: deleteAccountById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
  /admin/accounts/select:
    get:
      tags:
        - Accounts
      summary: Get list of shorted accounts for select element by filter
      description: Get list of shorted accounts for select element by filter
      operationId: getAccountsForSelect
      parameters:
        - $ref: '#/components/parameters/role'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelectionList'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'

  /admin/teams:
    get:
      tags:
        - Teams
      summary: Get list of teams by filter and sort
      description: Get list of teams by filter and sort
      operationId: getTeams
      parameters:
        - $ref: '#/components/parameters/teamNumber'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    post:
      tags:
        - Teams
      summary: Create team
      description: Create team
      operationId: createTeam
      requestBody:
        description: Team to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Teams
      summary: Update team
      description: Update team
      operationId: updateTeam
      requestBody:
        description: Team to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
  /admin/teams/{id}:
    get:
      tags:
        - Teams
      summary: Get team profile by id
      description: Get team profile by id
      operationId: getTeamById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamProfile'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    delete:
      tags:
        - Teams
      summary: Delete team by id
      description: Delete team by id
      operationId: deleteTeamById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /learner/teams/{id}:
    get:
      tags:
        - Teams
      summary: Get public team profile by id
      description: Get public team profile by id
      operationId: getTeamByIdLearner
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerTeamProfile'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /admin/teams/select:
    get:
      tags:
        - Teams
      summary: Get list of shorted teams for select element by filter
      description: Get list of shorted teams for select element by filter
      operationId: getTeamsForSelect
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamSelectionList'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /admin/assessments:
    get:
      tags:
        - Assessments
      summary: Get list of assessments by filter and sort
      description: Get list of assessments by filter and sort
      operationId: getAssessments
      parameters:
        - $ref: '#/components/parameters/learnerId'
        - $ref: '#/components/parameters/taskId'
        - $ref: '#/components/parameters/assessmentType'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/pageable'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    post:
      tags:
        - Assessments
      summary: Create assessment
      description: Create assessment
      operationId: createAssessment
      requestBody:
        description: Assessment to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Assessments
      summary: Update assessment
      description: Update assessment
      operationId: updateAssessment
      requestBody:
        description: Assessment to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
  /admin/assessments/{id}:
    get:
      tags:
        - Assessments
      summary: Get assessment info by id
      description: Get assessment info by id
      operationId: getAssessmentById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    delete:
      tags:
        - Assessments
      summary: Delete assessment by id
      description: Delete assessment by id
      operationId: deleteAssessmentById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /assessments/final-grades:
    get:
      tags:
        - Assessments
      summary: Get final grades by learner id
      description: Get final grades by learner id
      operationId: getFinalGradesByLearnerId
      parameters:
        - name: learnerId
          in: query
          description: Learner id
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalGradeInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /assessments/formula:
    get:
      tags:
        - Assessments
      summary: Get final grade formula
      description: Get final grade formula
      operationId: getFinalGradeFormula
      responses:
        200:
          description: 'Содержит массив объектов, состоящих из типа оценивания и его веса.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinalGradeFormula'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'

  /admin/assessments/formula:
    put:
      tags:
        - Assessments
      summary: Update final grade formula
      description: Update final grade formula
      operationId: updateFinalGradeFormula
      requestBody:
        description: Final grade formula
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinalGradeFormula'      
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /admin/assessments/increase-final-grade:
    post:
      tags:
        - Assessments
      summary: Increase the final grade of a certain student
      description: Increase the final grade of a certain student
      operationId: increaseFinalGrade
      requestBody:
        description: Bonus value
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BonusRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/assessments/final:
    get:
      tags:
        - Assessments
      summary: Get list of final assessments for learner
      description: Get list of final assessments for learner. Only assessment with type = FinalGrade
      operationId: getFinalAssessmentsLearner
      parameters:
        - $ref: '#/components/parameters/taskType'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearnerAssessmentTableItem'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /tracker/assessments:
    post:
      tags:
        - Assessments
      summary: Create assessment by tracker
      description: Create assessment by tracker
      operationId: createAssessmentByTracker
      requestBody:
        description: Assessment to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Assessments
      summary: Update assessment by tracker
      description: Update assessment by tracker
      operationId: updateAssessmentByTracker
      requestBody:
        description: Assessment to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /admin/tasks:
    get:
      tags:
        - Tasks
      summary: Get list of tasks by filter and sort
      description: Get list of tasks by filter and sort
      operationId: getTasks
      parameters:
        - $ref: '#/components/parameters/lessonId'
        - $ref: '#/components/parameters/taskType'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    post:
      tags:
        - Tasks
      summary: Create task
      description: Create task
      operationId: createTask
      requestBody:
        description: Task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Tasks
      summary: Update task
      description: Update task
      operationId: updateTask
      requestBody:
        description: Task to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    
  /admin/tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task info by id
      description: Get task info by id
      operationId: getTaskById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    delete:
      tags:
        - Tasks
      summary: Delete task by id
      description: Delete task by id
      operationId: deleteTaskById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /admin/tasks/select:
    get:
      tags:
        - Tasks
      summary: Get list of shorted tasks for select element by filter
      description: Get list of shorted tasks for select element by filter
      operationId: getTasksForSelect
      parameters:
        - $ref: '#/components/parameters/taskType'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSelectionList'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /admin/tasks/{id}/deadline:
    get:
      tags:
        - Tasks
      summary: Get deadline by task id
      description: Get deadline by task id
      operationId: getDeadlineByTask
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeadlineInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /admin/lessons:
    get:
      tags:
        - Lessons
      summary: Get list of lessons by filter and sort
      description: Get list of lessons by filter and sort
      operationId: getLessons
      parameters:
        - $ref: '#/components/parameters/lessonNumber'
        - $ref: '#/components/parameters/lessonTitle'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/pageable'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    post:
      tags:
        - Lessons
      summary: Create lesson
      description: Create lesson
      operationId: createLesson
      requestBody:
        description: Lesson to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Lessons
      summary: Update lesson
      description: Update lesson
      operationId: updateLesson
      requestBody:
        description: Lesson to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    
  /admin/lessons/{id}:
    get:
      tags:
        - Lessons
      summary: Get lesson info by id
      description: Get lesson info by id
      operationId: getLessonById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    delete:
      tags:
        - Lessons
      summary: Delete lesson by id
      description: Delete lesson by id
      operationId: deleteLessonById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /admin/lessons/select:
    get:
      tags:
        - Lessons
      summary: Get list of shorted lessons for select element
      description: Get list of shorted lessons for select element
      operationId: getLessonsForSelect
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonSelectionList'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /learner/lessons:
    get:
      tags:
        - Lessons
      summary: Get list of lessons by filter and sort
      description: Get list of lessons by filter and sort
      operationId: getLessonsLearner
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LearnerLessonTableItem'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/lessons/{id}:
    get:
      tags:
        - Lessons
      summary: Get lesson info by id
      description: Get lesson info by id
      operationId: getLessonByIdLearner
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerLessonInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
      
  /admin/lots:
    get:
      tags:
        - Lots
      summary: Get list of lots by filter and sort
      description: Get list of lots by filter and sort
      operationId: getLots
      parameters:
        - $ref: '#/components/parameters/lotNumber'
        - $ref: '#/components/parameters/lotTitle'
        - $ref: '#/components/parameters/learnerId'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LotsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    post:
      tags:
        - Lots
      summary: Create lot
      description: Create lot
      operationId: createLot
      requestBody:
        description: Lot to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLotRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Lots
      summary: Update lot
      description: Update lot
      operationId: updateLot
      requestBody:
        description: Lot to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLotRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    
  /admin/lots/{id}:
    get:
      tags:
        - Lots
      summary: Get lot info by id
      description: Get lot info by id
      operationId: getLotById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LotInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    delete:
      tags:
        - Lots
      summary: Delete lot by id
      description: Delete lot by id
      operationId: deleteLotById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/lots:
    get:
      tags:
        - Lots
      summary: Get list of lots by filter and sort
      description: Get list of lots by filter and sort
      operationId: getLotsLearner
      parameters:
        - $ref: '#/components/parameters/lotNumber'
        - $ref: '#/components/parameters/lotTitle'
        - $ref: '#/components/parameters/learnerId'
        - $ref: '#/components/parameters/priceFrom'
        - $ref: '#/components/parameters/priceTo'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerLotsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'

  /admin/transactions:
    get:
      tags:
        - Transactions
      summary: Get list of transactions by filter and sort
      description: Get list of transactions by filter and sort
      operationId: getTransactions
      parameters:
        - $ref: '#/components/parameters/learnerId'
        - $ref: '#/components/parameters/transactionType'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    post:
      tags:
        - Transactions
      summary: Create manual transaction
      description: Create manual transaction
      operationId: createManualTransaction
      requestBody:
        description: Manual transaction to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    
  /admin/transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Get transaction info by id
      description: Get transaction info by id
      operationId: getTransactionById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/transactions:
    get:
      tags:
        - Transactions
      summary: Get list of transactions by filter and sort
      description: Get list of transactions by filter and sort
      operationId: getTransactionsLearner
      parameters:
        - $ref: '#/components/parameters/transactionType'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerTransactionsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /admin/claims:
    get:
      tags:
        - Claims
      summary: Get list of claims by filter and sort
      description: "Get list of claims by filter and sort. \n\n Для всех типов заявок возможна фильтрация по параметрам claimStatus, dateFrom и dateTo. \n\n Если claimType = BuyingLot, то также возможна фильтрация по параметрам lotNumber и learnerId(покупатель). \n\n Если claimType = FailedDeadline, то также возможна фильтрация по параметрам taskId и learnerId(ученик). \n\n Если claimType = PlacingLot, то также возможна фильтрация по параметрам lotNumber и learnerId(исполнитель). \n\n Если claimType = Transfer, то также возможна фильтрация по параметрам learnerId(отправитель) и receiverId(получатель)."
      operationId: getClaims
      parameters:
        - $ref: '#/components/parameters/claimTypeRequired'
        - $ref: '#/components/parameters/claimStatus'
        - $ref: '#/components/parameters/lotNumber'
        - $ref: '#/components/parameters/learnerId'
        - $ref: '#/components/parameters/taskId'
        - $ref: '#/components/parameters/receiverId'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: "Для всех типов заявок в элементах поля content должны быть заполнены поля id, claimType, status и dateTime. \n\n Если claimType = BuyingLot, то также должны быть заполнены поля lot, learner(покупатель) и sum. \n\n Если claimType = FailedDeadline, то также должны быть заполнены поля learner(ученик), task и delay. \n\n Если claimType = PlacingLot, то также должны быть заполнены поля lot, learner(исполнитель) и sum. \n\n Если claimType = Transfer, то также должны быть заполнены поля learner(отправитель), receiver(получатель) и sum. \n\n Не заполненные поля должны содержать null. "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
            
    put:
      tags:
        - Claims
      summary: Approve/reject claim
      description: Approve/reject claim
      operationId: updateClaim
      requestBody:
        description: 'Поле fine заполняется только при типе заявки = DeadlineFailed и поле action = Approve'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminClaimRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    
  /admin/claims/{id}:
    get:
      tags:
        - Claims
      summary: Get claim info by id
      description: Get claim info by id
      operationId: getClaimById
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: "Для всех типов заявок должны быть заполнены поля id, claimType, status и dateTime. \n\n Если claimType = BuyingLot, то также должны быть заполнены поля lot и learner(покупатель). \n\n Если claimType = FailedDeadline, то также должны быть заполнены поля learner(ученик), deadline и fine(если status = Approved). \n\n Если claimType = PlacingLot, то также должно быть заполнено поле lot. \n\n claimType = Transfer, не запрашивается. \n\n Не заполненные поля должны содержать null."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClaimInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                

  # /claims/select:
  #   get:
  #     tags:
  #       - Claims
  #     summary: Get list of shorted claims for select element by filter
  #     description: Get list of shorted claims for select element by filter
  #     operationId: getClaimsForSelect
  #     parameters:
  #       - $ref: '#/components/parameters/role'
  #     responses:
  #       200:
  #         description: Successful response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/UserSelectionList'
  #       401:
  #         $ref: '#/components/responses/401'
  #       500:
  #         $ref: '#/components/responses/500'

  /admin/claims/new-amount:
    get:
      tags:
        - Claims
      summary: Get number of new claims by type
      description: Get number of new claims by type
      operationId: getNewClaimsAmount
      responses:
        200:
          description: 'Ответ содержит массив объектов, каждый из которых соответствует одному из типов заявок и содержит количество заявок этого типа в статусе = Waiting.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewClaimsAmount'

        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/claims:
    get:
      tags:
        - Claims
      summary: Get list of claims by filter and sort
      description: "Get list of claims by filter and sort. \n\n  Возможна фильтрация по параметрам claimType, claimStatus, dateFrom и dateTo \n\n Получение заявок с типом = DeadlineFailed невозможно."
      operationId: getClaimsLearner
      parameters:
        - $ref: '#/components/parameters/claimType'
        - $ref: '#/components/parameters/claimStatus'
        - $ref: '#/components/parameters/dateFrom'
        - $ref: '#/components/parameters/dateTo'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerClaimsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
        
    post:
      tags:
        - Claims
      summary: Create claim by user
      description: "Для всех типов заявок должно быть заполнено поле claimType. \n\n Если claimType = BuyingLot, то также должно быть заполнены поле buyingLotId. \n\n Если claimType = PlacingLot, то также должно быть заполнены поле lot. \n\n Если claimType = Transfer, то также должны быть заполнены поля receiverId(получатель) и sum. \n\n Не заполненные поля должны содержать null."
      operationId: createClaim
      requestBody:
        description: "Для всех типов заявок должно быть заполнено поле claimType. \n\n Если claimType = BuyingLot, то также должно быть заполнены поле buyingLotId. \n\n Если claimType = PlacingLot, то также должно быть заполнены поле lot. \n\n Если claimType = Transfer, то также должны быть заполнены поля receiverId(получатель) и sum. \n\n Не заполненные поля должны содержать null."
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LearnerClaimRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  

          
  /admin/attendance:
    get:
      tags:
        - Attendance
      summary: Get attendance by lesson id
      description: Get attendance by lesson id
      operationId: getAttendance
      parameters:
        - $ref: '#/components/parameters/lessonIdRequired'
      responses:
        200:
          description: 'Ответ содержит информацию об уроке в поле lesson и список leartners вообще всех зарегистрированных учеников, с полем didCome = true и возможно accruedСurrency у тех, кто пришёл.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttendanceInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
                  
    put:
      tags:
        - Attendance
      summary: Update attendance
      description: Update attendance
      operationId: updateAttendance
      requestBody:
        description: Attendance to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttendanceRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/files:
    post:
      tags:
        - Files
      summary: Upload a file
      description: Upload a file
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                taskId:
                  $ref: '#/components/schemas/id'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /files/{fileId}:
    get:
      tags:
        - Files
      summary: Downloads a ZIP file
      parameters:
        - in: path
          name: fileId
          schema:
            $ref: '#/components/schemas/id'
          required: true
          description: The id of the ZIP file to download
      responses:
        '200':
          description: ZIP file downloaded successfully
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: ZIP file not found
          
  /admin/solutions:
    get:
      tags:
        - Solutions
      summary: Get list of solutions by filter and sort
      description: "Get list of solutions by filter and sort. \n\n Если task коммандный, возможна фильтрация по teamId, а если task индивидуальный, то возможна фильтрация по learnerId."
      operationId: getSolutions
      parameters:
        - $ref: '#/components/parameters/taskIdRequired'
        - $ref: '#/components/parameters/learnerId'
        - $ref: '#/components/parameters/teamId'
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/pageable'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: "Если task коммандный, то заполнено поле team, а если task индивидуальный,  то заполнено поле learner."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SolutionsPage'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'

  /learner/solutions:
    get:
      tags:
        - Solutions
      summary: Get list of solutions for learner
      description: "Get list of solutions for learner. \n\n Возвращает все задания с типом 'HW' даже, если решение не было загружено (completeDate = null в response). \n\n Фильтрация невозможна."
      operationId: getSolutionsLearner
      parameters:
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerSolutionsTable'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /learner/solutions/{id}:
    get:
      tags:
        - Solutions
      summary: Get solution by id for learner
      description: Get solution by id for learner
      operationId: getSolutionByIdLearner
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LearnerSolutionInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /tracker/solutions/tasks:
    get:
      tags:
        - Solutions
      summary: Get list of tasks with solutions' info for tracker
      description: "Get list of tasks with solutions' info for tracker. \n\n Возвращает все задания с типом 'HW'."
      operationId: getSolutionsTracker
      parameters:
        - $ref: '#/components/parameters/sortProperty'
        - $ref: '#/components/parameters/sortOrder'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerTasksSolutionsTable'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
  
  /tracker/solutions:
    get:
      tags:
        - Solutions
      summary: Get list of solutions by task id for tracker
      description: "Get list of solutions by task id for tracker."
      operationId: getSolutionsByTaskIdTracker
      parameters:
        - $ref: '#/components/parameters/taskIdRequired'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerSolutionsTable'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /tracker/solutions/{id}:
    get:
      tags:
        - Solutions
      summary: Get solution info by id for tracker
      description: "Get solution info by id for tracker"
      operationId: getSolutionInfoByIdTracker
      parameters:
        - $ref: '#/components/parameters/idPath'
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerSolutionInfo'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
          
  /admin/mail:
    post:
      tags:
        - Mail
      summary: Create e-mail
      description: Create e-mail
      operationId: createEmail
      requestBody:
        description: E-mail to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        200:
          $ref: '#/components/responses/200'
        401:
          $ref: '#/components/responses/401'
        500:
          $ref: '#/components/responses/500'
    


components:
  parameters:
    idPath:
      name: id
      in: path
      description: id
      required: true
      schema:
        $ref: '#/components/schemas/id'
    learnerId:
      name: learnerId
      in: query
      description: Learner id
      schema:
        $ref: '#/components/schemas/id'
    taskId:
      name: taskId
      in: query
      description: Task id
      schema:
        $ref: '#/components/schemas/id'
    taskIdRequired:
      name: taskId
      in: query
      required: true
      description: Task id
      schema:
        $ref: '#/components/schemas/id'
    lessonId:
      name: lessonId
      in: query
      description: Lesson id
      schema:
        $ref: '#/components/schemas/id'
    teamId:
      name: teamId
      in: query
      description: Team id
      schema:
        $ref: '#/components/schemas/id'
    lessonIdRequired:
      name: lessonId
      in: query
      description: Lesson id
      required: true
      schema:
        $ref: '#/components/schemas/id'
    receiverId:
      name: receiverId
      in: query
      description: Receiver id
      schema:
        $ref: '#/components/schemas/id'
    name:
      name: name
      in: query
      description: Search name
      schema:
        $ref: '#/components/schemas/shortName'
    email:
      name: email
      in: query
      description: Search email
      schema:
        $ref: '#/components/schemas/email'
    teamNumber:
      name: teamNumber
      in: query
      description: Search team number
      schema:
        $ref: '#/components/schemas/teamNumber'
    lessonNumber:
      name: lessonNumber
      in: query
      description: Search lesson number
      schema:
        $ref: '#/components/schemas/lessonNumber'
    lessonTitle:
      name: lessonTitle
      in: query
      description: Search lesson title
      schema:
        $ref: '#/components/schemas/lessonTitle'
    lotNumber:
      name: lotNumber
      in: query
      description: Search lot number
      schema:
        $ref: '#/components/schemas/lotNumber'
    lotTitle:
      name: lotTitle
      in: query
      description: Search lot title
      schema:
        $ref: '#/components/schemas/lotTitle'
    role:
      name: role
      in: query
      description: Search role
      schema:
        $ref: '#/components/schemas/role'
    assessmentType:
      name: assessmentType
      in: query
      description: Search assessment type
      schema:
        $ref: '#/components/schemas/assessmentType'
    dateFrom:
      name: dateFrom
      in: query
      description: The beginning of the desired interval
      schema:
        $ref: '#/components/schemas/date' 
    dateTo:
      name: dateTo
      in: query
      description: The end of the desired interval
      schema:
        $ref: '#/components/schemas/date'
    priceFrom:
      name: priceFrom
      in: query
      description: The beginning of the desired interval
      schema:
        $ref: '#/components/schemas/price' 
    priceTo:
      name: priceTo
      in: query
      description: The end of the desired interval
      schema:
        $ref: '#/components/schemas/price'
    taskType:
      name: taskType
      in: query
      description: Search task type
      schema:
        $ref: '#/components/schemas/taskType'
    transactionType:
      name: transactionType
      in: query
      description: Search transaction type
      schema:
        $ref: '#/components/schemas/transactionType'
    claimType:
      name: claimType
      in: query
      description: Search claim type
      schema:
        $ref: '#/components/schemas/claimType'
    claimTypeRequired:
      name: claimType
      in: query
      required: true
      description: Search claim type
      schema:
        $ref: '#/components/schemas/claimType'
    claimStatus:
      name: claimStatus
      in: query
      description: Search claim status
      schema:
        $ref: '#/components/schemas/claimStatus'
    sortProperty:
      name: sortProperty
      in: query
      description: Property of response to sort by
      schema:
        type: string
        example: 
          name
    sortOrder:
      name: sortOrder
      in: query
      description: OSorting order
      schema:
        $ref: '#/components/schemas/sortOrder'
    page:
      name: page
      in: query
      description: Page number
      schema:
        $ref: '#/components/schemas/pageNumber'
    pageSize:
      name: pageSize
      in: query
      description: The size of the page to be returned
      schema:
        $ref: '#/components/schemas/pageSize'
    pageable:
      name: pageable
      in: query
      description: 'Если false, то без pagination.'
      schema:
        type: boolean
        default: true
      
  responses:
    200:
      description: Successful response
    401:
      description: Unauthorized
    500:
      description: Internal server error
  
  schemas:
    id:
      type: integer
      example: 123
    email:
      type: string
      format: email
      example: "all@edu.hse.ru"
    password:
      type: string
      format: password
      example: '123456'
    name:
      type: string
      example: 'Иван'
    surname:
      type: string
      example: 'Иванов'
    middleName:
      type: string
      example: 'Иванович'
    shortName:
      type: string
      example: 'Иванов Иван'
    fullName:
      type: string
      example: 'Иванов Иван Иванович'
    date:
      type: string
      format: date-time
      example: '13.07.2023'
    dateTime:
      type: string
      format: date-time
      example: '13.07.2023 12:13:44'
    teamNumber:
      type: integer
      example: 1
      minimum: 1
    role:
      type: string
      enum: ['Learner', 'Tracker']
      example: 'Learner'
    balance:
      type: integer
      example: 120
    phone:
      type: string
      format: phone
      example: +79157777777
    messanger:
      type: string
      example: "tg:@ivan"
    gender:
      type: boolean
      example: true
    projectTheme:
      type: string
      example: 'Тема проекта'
    assessmentType:
      type: string
      enum: ['FinalGrade', 'TrackerGrade']
      example: 'FinalGrade'
    assessment:
      type: integer
      minimum: 0
      maximum: 10
      example: 8
    comment:
      type: string
      example: 'Some comment'
    finalGradeType:
      type: string
      enum: ['HW', 'Testing', 'Competitions', 'Exams', 'Attendance']
    gradeWeight:
      type: number
      minimum: 0
      maximum: 1
      example: 0.3
    bonus:
      type: number
      example: 1.2
    taskType:
      type: string
      enum: ['HW', 'Test', 'Competition', 'Exam']
      example: 'HW'
    taskTitle:
      type: string
      example: 'ДЗ_1'
    description:
      type: string
      example: 'Some description'
    criteria:
      type: string
      example: 'Some criteria'
    link:
      type: string
      example: 'https://editor.swagger.io/'
    lessonNumber:
      type: integer
      minimum: 1
      example: 7
    lessonTitle:
      type: string
      minimum: 1
      example: "Тема о чём-то"
    lotTitle:
      type: string
      minimum: 1
      example: "Какой-то лот"
    lotNumber:
      type: integer
      minimum: 1
      example: 7
    price:
      type: integer
      minimum: 1
      example: 150
    transactionType:
      type: string
      enum: ['Activity', 'SellLot', 'AdminIncome', 'TransferIncome', 'FailedDeadline', 'BuyLot', 'AdminOutcome', 'TransferOutcome']
      example: 'Activity'
    sum:
      type: integer
      minimum: 1
      example: 150
    delay:
      type: integer
      minimum: 1
      example: 100000
      description: Разница между датой сдачи и дедлайном в мс.
    claimType:
      type: string
      enum: ['BuyingLot', 'FailedDeadline', 'PlacingLot', 'Transfer']
      example: 'BuyingLot'
    claimStatus:
      type: string
      enum: ['Waiting', 'Approved', 'Declined']
      example: 'Waiting'
    claimTitle:
      type: string
      minimum: 1
      example: "Какая-то заявка"
    claimAction:
      type: string
      enum: ['Approve', 'Reject']
      example: 'Approve'
    emailGroupingTypes:
      type: string
      enum: ['All', 'Learners', 'Trackers']
    sortOrder:
      type: string
      enum: ['asc', 'desc']
      example: 'asc'
    pageNumber:
      type: integer
      default: 1
      example: 1
      minimum: 1
    pageSize:
      type: integer
      example: 10
      minimum: 1
      default: 10
      description: The size of the page to be returned
    totalPages:
      type: integer
      example: 10
      minimum: 1
      description: Total amount of pages
    totalElements:
      type: integer
      example: 100
      minimum: 0
      description: Total amount of elements found
      
    AuthRequest:
      type: object
      properties:
        login:
          type: string
          example: "all@edu.hse.ru"
        password:
          type: string
          example: 'qwerty'
          
    AuthResponse:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/role'
        
          
    FinalGradeFormula:
      type: array
      items:
        type: object
        properties:
          weight:
            $ref: '#/components/schemas/gradeWeight'
          type:
            $ref: '#/components/schemas/finalGradeType'
          
    Pagination:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/pageNumber'
        pageSize:
          $ref: '#/components/schemas/pageSize'
        totalPages:
          $ref: '#/components/schemas/totalPages'
        totalElements:
          $ref: '#/components/schemas/totalElements'
          
    UserSelectionItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/shortName'
          
    UserSelectionList:
      type: array
      items:
        $ref: '#/components/schemas/UserSelectionItem'

    UserTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/shortName'  
        email:
          $ref: '#/components/schemas/email'
        teamNumber:
          type: array
          items:
            $ref: '#/components/schemas/teamNumber'
        role:
          $ref: '#/components/schemas/role'
        balance:
          $ref: '#/components/schemas/balance'
          
    UserProfile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        fullName:
          $ref: '#/components/schemas/fullName'  
        email:
          $ref: '#/components/schemas/email'
        phone:
          $ref: '#/components/schemas/phone'
        messanger:
          $ref: '#/components/schemas/messanger'
        teamNumber:
          type: array
          items:
            $ref: '#/components/schemas/teamNumber'
        gender:
          $ref: '#/components/schemas/gender'
        role:
          $ref: '#/components/schemas/role'
        balance:
          $ref: '#/components/schemas/balance'
          
    PublicUserProfile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        fullName:
          $ref: '#/components/schemas/fullName'  
        email:
          $ref: '#/components/schemas/email'
        messanger:
          $ref: '#/components/schemas/messanger'
        role:
          $ref: '#/components/schemas/role'
    
    UserRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          $ref: '#/components/schemas/name' 
        surname:
          $ref: '#/components/schemas/surname' 
        middleName:
          $ref: '#/components/schemas/middleName' 
        email:
          $ref: '#/components/schemas/email'
        phone:
          $ref: '#/components/schemas/phone'
        messanger:
          $ref: '#/components/schemas/messanger'
        gender:
          $ref: '#/components/schemas/gender'
        role:
          $ref: '#/components/schemas/role'
        password:
          $ref: '#/components/schemas/password'
      
    AccountsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserTableItem'
          
    TeamSelectionItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/teamNumber'
          
    TeamSelectionList:
      type: array
      items:
        $ref: '#/components/schemas/TeamSelectionItem'
            
    TeamTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        teamNumber:
          $ref: '#/components/schemas/teamNumber'
        projectTheme:
          $ref: '#/components/schemas/projectTheme'
    
    TeamProfile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        teamNumber:
          $ref: '#/components/schemas/teamNumber'
        projectTheme:
          $ref: '#/components/schemas/projectTheme'
        members:
          type: array
          items:
            $ref: '#/components/schemas/UserTableItem'
    
    LearnerTeamProfile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        teamNumber:
          $ref: '#/components/schemas/teamNumber'
        projectTheme:
          $ref: '#/components/schemas/projectTheme'
        members:
          type: array
          items:
            $ref: '#/components/schemas/PublicUserProfile'
            
    TeamRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        projectTheme:
          $ref: '#/components/schemas/projectTheme'
        members:
          type: array
          items:
            $ref: '#/components/schemas/id'
    
    TeamsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/TeamTableItem'
    
    AssessmentTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        learner: 
          $ref: '#/components/schemas/UserSelectionItem'
        task: 
          $ref: '#/components/schemas/TaskSelectionItem'
        issueDate:
          $ref: '#/components/schemas/dateTime'
        assessmentType:
          $ref: '#/components/schemas/assessmentType'
        assessment:
          $ref: '#/components/schemas/assessment'
          
    LearnerAssessmentTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        taskTitle: 
          $ref: '#/components/schemas/taskTitle'
        taskType:
          $ref: '#/components/schemas/taskType'
        lessonId:
          $ref: '#/components/schemas/id'  
        issueDate:
          $ref: '#/components/schemas/dateTime'
        assessment:
          $ref: '#/components/schemas/assessment'
          
    AssessmentInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        learner: 
          $ref: '#/components/schemas/UserSelectionItem'
        tracker: 
          $ref: '#/components/schemas/UserSelectionItem'
        task: 
          $ref: '#/components/schemas/TaskSelectionItem'
        issueDate:
          $ref: '#/components/schemas/dateTime'
        assessmentType:
          $ref: '#/components/schemas/assessmentType'
        assessment:
          $ref: '#/components/schemas/assessment'
        comment:
          $ref: '#/components/schemas/comment'
          
    TrackerAssessment:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        trackerName: 
          $ref: '#/components/schemas/fullName'
        assessment:
          $ref: '#/components/schemas/assessment'
        comment:
          $ref: '#/components/schemas/comment'
          
    FinalGradeInfo:
      type: object
      properties:
        assessments:
          type: array
          items:
            type: object
            properties:
              finalAssessment:
                type: number
                example: 6.33   
              type:
                $ref: '#/components/schemas/finalGradeType'  
        bonus:
          $ref: '#/components/schemas/bonus'  
        total:
          type: number
          example: 8.7
          
    BonusRequest:
      type: object
      properties:
        learnerId:
          $ref: '#/components/schemas/id'  
        bonus:
          $ref: '#/components/schemas/bonus'
    
    AssessmentRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'  
        learnerId:
          $ref: '#/components/schemas/id'
        teamId:
          $ref: '#/components/schemas/id'
        assessment:
          $ref: '#/components/schemas/assessment'
        taskId:
          $ref: '#/components/schemas/id'
        comment:
          $ref: '#/components/schemas/comment'

    AssessmentsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/AssessmentTableItem'
            
    TaskTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/taskTitle'
        lesson:
          $ref: '#/components/schemas/LessonSelectionItem'
        taskType:
          $ref: '#/components/schemas/taskType'  
        deadline:
          $ref: '#/components/schemas/dateTime'
          
    TaskSelectionItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/taskTitle'
          
    TaskSelectionList:
      type: array
      items:
        $ref: '#/components/schemas/TaskSelectionItem'
          
    TaskInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/taskTitle'
        lesson:
          $ref: '#/components/schemas/LessonSelectionItem'
        description:
          $ref: '#/components/schemas/description'
        criteria:
          $ref: '#/components/schemas/criteria'
        isTeamWork:
          type: boolean
          example: true
        link:
          $ref: '#/components/schemas/link'
        taskType:
          $ref: '#/components/schemas/taskType'  
        deadline:
          $ref: '#/components/schemas/dateTime'
          
    TaskRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/taskTitle'
        lessonId:
          $ref: '#/components/schemas/id'
        description:
          $ref: '#/components/schemas/description'
        criteria:
          $ref: '#/components/schemas/criteria'
        isTeamWork:
          type: boolean
          example: true
        link:
          $ref: '#/components/schemas/link'
        taskType:
          $ref: '#/components/schemas/taskType'  
        deadline:
          $ref: '#/components/schemas/dateTime'
          
    TasksPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/TaskTableItem'
            
    LessonSelectionItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lessonNumber'
          
    LessonSelectionList:
      type: array
      items:
        $ref: '#/components/schemas/LessonSelectionItem'

    LessonTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lessonNumber'  
        title:
          $ref: '#/components/schemas/lessonTitle'
        date:
          $ref: '#/components/schemas/date'
    
    LearnerLessonTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lessonNumber'  
        title:
          $ref: '#/components/schemas/lessonTitle'
          
    LessonInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lessonNumber'  
        title:
          $ref: '#/components/schemas/lessonTitle'
        description:
          $ref: '#/components/schemas/description'
        date:
          $ref: '#/components/schemas/date'
        presLink:
          $ref: '#/components/schemas/link'
        videoLink:
          $ref: '#/components/schemas/link'
        homework:
          $ref: '#/components/schemas/TaskSelectionItem'
        test:
          $ref: '#/components/schemas/TaskSelectionItem'
    
    LearnerLessonInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lessonNumber'  
        title:
          $ref: '#/components/schemas/lessonTitle'
        description:
          $ref: '#/components/schemas/description'
        date:
          $ref: '#/components/schemas/date'
        presLink:
          $ref: '#/components/schemas/link'
        videoLink:
          $ref: '#/components/schemas/link'
        homework:
          $ref: '#/components/schemas/TaskInfo'
        test:
          $ref: '#/components/schemas/TaskInfo'
          
    
    LessonRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lessonNumber'  
        title:
          $ref: '#/components/schemas/lessonTitle'
        description:
          $ref: '#/components/schemas/description'
        date:
          $ref: '#/components/schemas/date'
        presLink:
          $ref: '#/components/schemas/link'
        videoLink:
          $ref: '#/components/schemas/link'
        homeworkId:
          $ref: '#/components/schemas/id'
        testId:
          $ref: '#/components/schemas/id'
      
    LessonsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/LessonTableItem'
            
    LotSelectionItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lotNumber'
          
          
    LotSelectionList:
      type: array
      items:
        $ref: '#/components/schemas/LotSelectionItem'
        
    LotTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lotNumber'  
        title:
          $ref: '#/components/schemas/lotTitle'
        performer:
          $ref: '#/components/schemas/UserSelectionItem'
        price:
          $ref: '#/components/schemas/price'
        
          
    LotInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        number:
          $ref: '#/components/schemas/lotNumber'  
        title:
          $ref: '#/components/schemas/lotTitle'
        description:
          $ref: '#/components/schemas/description'
        terms:
          $ref: '#/components/schemas/criteria'  
        performer:
          $ref: '#/components/schemas/UserSelectionItem'
        price:
          $ref: '#/components/schemas/price'
          
    
    AdminLotRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/lotTitle'
        description:
          $ref: '#/components/schemas/description'
        terms:
          $ref: '#/components/schemas/criteria'  
        performer:
          $ref: '#/components/schemas/UserSelectionItem'
        price:
          $ref: '#/components/schemas/price'
    
    LearnerLotRequest:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/lotTitle'
        description:
          $ref: '#/components/schemas/description'
        terms:
          $ref: '#/components/schemas/criteria'  
        price:
          $ref: '#/components/schemas/price'
      
    LotsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/LotTableItem'
            
    LearnerLotsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/LotInfo'
            
        
    AdminTransactionTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        learner:
          $ref: '#/components/schemas/UserSelectionItem'
        type:
          $ref: '#/components/schemas/transactionType'  
        description:
          $ref: '#/components/schemas/description'
        dateTime:
          $ref: '#/components/schemas/dateTime'  
        sum:
          $ref: '#/components/schemas/sum'
          
    LearnerTransactionTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        type:
          $ref: '#/components/schemas/transactionType'  
        description:
          $ref: '#/components/schemas/description'
        dateTime:
          $ref: '#/components/schemas/dateTime'  
        sum:
          $ref: '#/components/schemas/sum'
        
          
    TransactionInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        learner:
          $ref: '#/components/schemas/UserSelectionItem'
        type:
          $ref: '#/components/schemas/transactionType'  
        description:
          $ref: '#/components/schemas/description'
        dateTime:
          $ref: '#/components/schemas/dateTime'  
        sum:
          $ref: '#/components/schemas/sum'
        calim:
          $ref: '#/components/schemas/ClaimSelectionItem'          
          
    
    TransactionRequest:
      type: object
      properties:
        learnerId:
          $ref: '#/components/schemas/id'
        description:
          $ref: '#/components/schemas/description'
        sum:
          $ref: '#/components/schemas/sum'
      
    TransactionsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/AdminTransactionTableItem'
              
    LearnerTransactionsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/LearnerTransactionTableItem'
            
    ClaimSelectionItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        title:
          $ref: '#/components/schemas/claimTitle'
          
    ClaimSelectionList:
      type: array
      items:
        $ref: '#/components/schemas/ClaimSelectionItem'
        
    NewClaimsAmount:
      type: object
      properties:
        claimType:
          $ref: '#/components/schemas/claimType'
        amount:
          type: integer
          minimum: 0
          example: 11
          

    AdminClaimTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        claimType:
          $ref: '#/components/schemas/claimType'  
        lot:
          $ref: '#/components/schemas/LotSelectionItem'
        task:
          $ref: '#/components/schemas/TaskSelectionItem'
        learner:
          $ref: '#/components/schemas/UserSelectionItem'
        receiver:
          $ref: '#/components/schemas/UserSelectionItem'
        dateTime:
          $ref: '#/components/schemas/dateTime'  
        status:
          $ref: '#/components/schemas/claimStatus'
        sum:
          $ref: '#/components/schemas/sum'
        delay:
          $ref: '#/components/schemas/delay'
    
    LearnerClaimTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        claimType:
          $ref: '#/components/schemas/claimType'  
        title:
          $ref: '#/components/schemas/claimTitle'
        dateTime:
          $ref: '#/components/schemas/dateTime'  
        status:
          $ref: '#/components/schemas/claimStatus'
          
    DeadlineInfo:
      type: object
      properties:
        lesson:
          $ref: '#/components/schemas/LessonSelectionItem'
        task:
          $ref: '#/components/schemas/TaskSelectionItem'
        deadlineTime:
          $ref: '#/components/schemas/dateTime'  
          
    ClaimInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        claimType:
          $ref: '#/components/schemas/claimType'  
        lot:
          $ref: '#/components/schemas/LotInfo'
        deadline:
          $ref: '#/components/schemas/DeadlineInfo'
        learner:
          $ref: '#/components/schemas/UserSelectionItem'
        dateTime:
          $ref: '#/components/schemas/dateTime'  
        status:
          $ref: '#/components/schemas/claimStatus'
        fine:
          $ref: '#/components/schemas/sum'
    
    AdminClaimRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        action:
          $ref: '#/components/schemas/claimAction'
        fine:
          $ref: '#/components/schemas/sum'
          
    LearnerClaimRequest:
      type: object
      properties:
        claimType:
          $ref: '#/components/schemas/claimType'  
        lot:
          $ref: '#/components/schemas/LearnerLotRequest'
        buyingLotId:
          $ref: '#/components/schemas/id'
        receiverId:
          $ref: '#/components/schemas/id'
        sum:
          $ref: '#/components/schemas/sum'
      
    ClaimsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/AdminClaimTableItem'
    
    LearnerClaimsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/LearnerClaimTableItem'
            
    AttendanceInfo:
      type: object
      properties:
        lesson:
          $ref: '#/components/schemas/LessonTableItem'
        learners:
          type: array
          items:
            type: object
            properties:
              learner: 
                $ref: '#/components/schemas/UserTableItem'
              didCome:
                type: boolean
                example: true
              accruedСurrency:
                $ref: '#/components/schemas/price'
    
    AttendanceRequest:
      type: object
      properties:
        lessonId:
          $ref: '#/components/schemas/id'
        learners:
          type: array
          items:
            type: object
            properties:
              learnerId:
                $ref: '#/components/schemas/id'
              accruedСurrency:
                $ref: '#/components/schemas/price'

    AdminSolutionTableItem:
      type: object
      properties:
        learner:
          $ref: '#/components/schemas/UserSelectionItem'
        team:
          $ref: '#/components/schemas/TeamSelectionItem'  
        completeDateTime:
          $ref: '#/components/schemas/dateTime'
        fileId:
          $ref: '#/components/schemas/id'
          
    LearnerSolutionTableItem:
      type: object
      properties:
        task:
          $ref: '#/components/schemas/TaskSelectionItem'
        deadline:
          $ref: '#/components/schemas/dateTime'
        completeDateTime:
          $ref: '#/components/schemas/dateTime'
          
    TrackerTasksSolutionTableItem:
      type: object
      properties:
        task:
          $ref: '#/components/schemas/TaskSelectionItem'
        deadline:
          $ref: '#/components/schemas/dateTime'
        submittedNumber:
          type: integer
          example: 10
        notEvaluatedNumber:
          type: integer
          example: 5
          
    TrackerSolutionTableItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        name:
          type: string
          description: Team number or learner name
          example: 'Иванов Иван Иванович'
        completeDateTime:
          $ref: '#/components/schemas/dateTime'
        assessment:
          $ref: '#/components/schemas/assessment'  
        
          
    LearnerSolutionInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'  
        task:
          $ref: '#/components/schemas/TaskInfo'
        completeDateTime:
          $ref: '#/components/schemas/dateTime'
        fileId:
          $ref: '#/components/schemas/id'
        trackerAssessments:
          type: array
          items:
            $ref: '#/components/schemas/TrackerAssessment'
            
    TrackerSolutionInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'  
        learner:
          $ref: '#/components/schemas/UserSelectionItem'
        team:
          $ref: '#/components/schemas/TeamSelectionItem'  
        task:
          $ref: '#/components/schemas/TaskInfo'
        completeDateTime:
          $ref: '#/components/schemas/dateTime'
        fileId:
          $ref: '#/components/schemas/id'
        comment:
          $ref: '#/components/schemas/comment'
        assessment:
          $ref: '#/components/schemas/assessment'  
            
    # LearnerSolutionInfo:
    #   type: object
    #   properties:
    #     id:
    #       $ref: '#/components/schemas/id'  
    #     task:
    #       $ref: '#/components/schemas/TaskInfo'
    #     completeDateTime:
    #       $ref: '#/components/schemas/dateTime'
    #     fileId:
    #       $ref: '#/components/schemas/id'
    #     trackerAssessments:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/TrackerAssessment'  

      
    SolutionsPage:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        content:
          type: array
          items:
            $ref: '#/components/schemas/AdminSolutionTableItem'

    LearnerSolutionsTable:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/LearnerSolutionTableItem'
    
    TrackerTasksSolutionsTable:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TrackerTasksSolutionTableItem'
            
    TrackerSolutionsTable:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TrackerSolutionTableItem'
            
    EmailRequest:
      type: object
      properties:
        grouping:
          type: array
          items:
            $ref: '#/components/schemas/emailGroupingTypes'
        learnersIds:
          type: array
          items:
            $ref: '#/components/schemas/id'
        teamsIds:
          type: array
          items:
            $ref: '#/components/schemas/id'
        title:
          type: string
          example: "Some title"
        content:
          $ref: '#/components/schemas/description'  

        
          
          
        





tags:
  - name: Authentication
  - name: Accounts
  - name: Teams
  - name: Assessments
  - name: Claims
  - name: Transactions
  - name: Lots
  - name: Lessons
  - name: Tasks
  - name: Attendance
  - name: Files
  - name: Solutions
  - name: Mail